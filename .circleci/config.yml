aliases:
  - &restore_gradle_cache
    run:
      command: echo "restore_gradle_cache"

  - &restore_robolectric_cache
    run:
      command: echo "restore_robolectric_cache"

  - &restore_bundle_cache
    run:
      command: echo "restore_bundle_cache"

  - &environment
    working_directory: ~/code
    docker:
      - image: circleci/android:api-28-alpha

version: 2
workflows:
  version: 2
  "Build Pipeline":
    jobs:
      - dependencies
      - lint:
          requires:
            - dependencies
      - tests:
          requires:
            - dependencies

jobs:
  dependencies:
    <<: *environment
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_robolectric_cache
      - *restore_bundle_cache
      - run:
          name: Bundle install
          command: echo "Done"


  lint:
    <<: *environment
    steps:
      - attach_workspace:
          at: .
      - *restore_gradle_cache
      - run:
          name: Run checkStyle, pmd and lint
          command: echo "Done"

  tests:
    <<: *environment
    steps:
      - attach_workspace:
          at: .
      - *restore_gradle_cache
      - *restore_robolectric_cache
      - run:
          name: Run tests
          command: echo "Done"
      - run:
          name: test splitting output
          command: |
            # Get list of classnames of tests that should run on this node
            pwd
            ls
            cd app
            cd src/test/java
            CLASSNAMES=$(circleci tests glob "**/*Test.*" \
              | cut -c 1- | sed 's@/@.@g' \
              | sed 's/\.[^.]*$//' \
              | circleci tests split --total=2 --split-by=timings --timings-type=classname)
            cd ./../../../..
            # Format the arguments to "./gradlew test"
            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
            echo "Prepared arguments for Gradle: $GRADLE_ARGS"
            echo testIndiaReleaseUnitTest $GRADLE_ARGS


  assemble_debug_apks:
    <<: *environment
    steps:
      - attach_workspace:
          at: .
      - *restore_gradle_cache
      - run:
          name: Assemble debug variants
          command: ./gradlew assembleDebug -Pminify=true
      - persist_to_workspace:
          root: .
          paths:
            - app/build/outputs/apk/debug

  assemble_release_apks:
    <<: *environment
    steps:
      - attach_workspace:
          at: .
      - *restore_gradle_cache
      - run:
          name: Assemble release variants
          command: ./gradlew assembleRelease -x lintVitalRelease -Pminify=true
      - persist_to_workspace:
          root: .
          paths:
            - app/build/outputs/apk/release

  deploy_debug_apks_to_crashlytics:
    <<: *environment
    steps:
      - attach_workspace:
          at: .
      - deploy:
          name: Upload debug variant to Crashlytics Beta
          command: |
            set +e # see https://circleci.com/docs/2.0/configuration-reference/#default-shell-options
            skip_release_grep=$(git log -1 | grep -i 'ci-skip-release')
            if [ "${CIRCLE_BRANCH}" == "develop" ] && [ ${#skip_release_grep} -eq 0 ]; then
              ./gradlew crashlyticsUploadDistributionDebug
            fi


  upload_app_metrics_manifest:
    <<: *environment
    steps:
      - attach_workspace:
          at: .
      - store_artifacts:
          name: Store merged AndroidManifest.xml
          path: app/build/intermediates/merged_manifests/release/AndroidManifest.xml
          destination: outputs/AndroidManifest.xml
      - run:
          name: Execute Danger
          command: bundle exec danger --dangerfile=quality/danger/Dangerfile --verbose
      - run:
          name: Upload app metrics
          command: |
            if [ ${CIRCLE_BRANCH} == master ]; then bundle exec quality/danger/upload_master_app_metrics.rb; fi



  upload_reports:
    <<: *environment
    steps:
      - attach_workspace:
          at: .
      - store_artifacts:
          name: Store reports
          path: app/build/reports
          destination: reports

  upload_apks:
    <<: *environment
    steps:
      - attach_workspace:
          at: .
      - store_artifacts:
          path: app/build/outputs
          destination: outputs
